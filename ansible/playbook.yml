---
- hosts: all
  become: yes

  tasks:
  - name: Install system updates
    ansible.builtin.dnf:
      name: '*'
      state: latest
      update_cache: yes
      nobest: true # To avoid 'cannot install the best update candidate for package python3-policycoreutils-3.5-1.el9.noarch'
    register: output

  - name: System updates result
    ansible.builtin.debug:
      var: output.results

  - name: Install OS packages
    ansible.builtin.dnf:
      name:
      - pip
      - yum-utils
      state: present

  - name: Install Python packages
    ansible.builtin.pip:
      name:
      - boto3==1.29.6
      - botocore==1.32.6
      - mock==5.1.0
      - Requests==2.31.0
      - simplejson==3.19.2
      - docker==6.1.3
      - docker-compose==1.29.2
      - google-cloud-compute==1.15.0

  - name: Add Docker repo
    ansible.builtin.get_url:
      url: https://download.docker.com/linux/centos/docker-ce.repo
      dest: /etc/yum.repos.d/docker-ce.repo

  - name: Install Docker packages
    ansible.builtin.dnf:
      name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
      state: present
      update_cache: yes

  - name: Start and enable Docker service
    ansible.builtin.service:
      name: docker
      state: started
      enabled: yes

  - name: Add user 'isc' to docker group
    ansible.builtin.user:
      name: isc
      groups: docker
      append: yes

  - name: Create Docker working directory
    ansible.builtin.file:
      path: "/isc-mirror/{{ item }}"
      state: directory
      mode: '0755'
    loop:
    - iris
    - webgateway
    when: ansible_facts['hostname'] != "isc-client-001"

  - name: Authenticate Docker to Artifact Registry
    ansible.builtin.shell:
      cmd: "gcloud auth configure-docker {{ region }}-docker.pkg.dev --quiet"
    become_user: "{{ ansible_user }}"
    when: ansible_facts['hostname'] != "isc-client-001"

  - name: Copy Docker files
    ansible.builtin.copy:
      src: "{{ item.local_dir }}"
      dest: "/isc-mirror/{{ item.remote_dir }}/{{ item.local_dir | basename }}"
      owner: isc
      group: isc
      mode: '0644'
    loop:
    - {local_dir: '../docker-compose/iris/', remote_dir: 'iris'}
    - {local_dir: '../docker-compose/webgateway/', remote_dir: 'webgateway'}
    when: ansible_facts['hostname'] == "isc-primary-001" or ansible_facts['hostname'] == "isc-backup-001"

  - name: Render and copy docker-compose-mirror file
    ansible.builtin.template:
      src: ../docker-compose/docker-compose-mirror.j2
      dest: /isc-mirror/docker-compose.yml
      owner: isc
      group: isc
      mode: '0644'
    when: ansible_facts['hostname'] == "isc-primary-001" or ansible_facts['hostname'] == "isc-backup-001"

  - name: Render and copy docker-compose-arbiter file
    ansible.builtin.template:
      src: ../docker-compose/docker-compose-arbiter.j2
      dest: /isc-mirror/docker-compose.yml
      owner: isc
      group: isc
      mode: '0644'
    when: ansible_facts['hostname'] == "isc-arbiter-001"

  - name: Start IRIS
    community.docker.docker_compose:
      project_src: /isc-mirror/
      files:
      - docker-compose.yml
    register: output
    when: ansible_facts['hostname'] != "isc-client-001"

  - name: Start IRIS result
    ansible.builtin.debug:
      var: output
    when: ansible_facts['hostname'] != "isc-client-001"
